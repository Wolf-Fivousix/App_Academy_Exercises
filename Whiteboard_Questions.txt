Problem .2:
Find all the permutations of an array
example => permutations([1,2,3])
should return => [
  [1, 2, 3],
  [1, 3, 2],
  [2, 1, 3],
  [2, 3, 1],
  [3, 1, 2],
  [3, 2, 1]
 ]


array = [1,2,3]

def permutations(array)
    return [array] if array.length <= 1
    results = []
    array.each.with_index do |element, index|
        # p "Array: #{array}"
        # p "Element: #{element}"
        # p "Index: #{index}"
        permutations(array[0...index] + array[index + 1..-1]).each do |subarray|
            results << [element] + subarray
        end
    end
    results
end

p permutations(array) == array.permutation.to_a


=============================================== W7D5
## Valid Parenthesis

Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

### Example 1:
Input: "()"
Output: true

### Example 2:
Input: "()[]{}"
Output: true

## Example 3:
Input: "(]"
Output: false

### Example 4:
Input: "([)]"
Output: false

### Example 5:
Input: "{[]}"
Output: true

## Given a singly-linked list, determine if it has a cycle in it.


=============================================== W8D1
#1 Reverse a linked list
Given pointer to the head node of a linked list, the task is to reverse the linked list. We need to reverse the list by changing links between nodes.
Input: Head of following linked list
1->2->3->4->NULL
Output: Linked list should be changed to,
4->3->2->1->NULL

Input: Head of following linked list
1->2->3->4->5->NULL
Output: Linked list should be changed to,
5->4->3->2->1->NULL

Input: NULL
Output: NULL

Input: 1->NULL
Output: 1->NULL
#2 Bin Packing Problem (minimize number of used bins)
Given n items of different weights and bins each of capacity c, assign each item to a bin such that number of total used bins is minimized. It may be assumed that all items have weights smaller than bin capacity.
Input:  wieght = [4, 8, 1, 4, 2, 1]
        Bin Capacity c = 10
Output: 2
We need minimum 2 bins to accommodate all items
First bin contains [4, 4, 2] and second bin [8, 2]

Input:  wieght = [9, 8, 2, 2, 5, 4]
        Bin Capacity c = 10
Output: 4
We need minimum 4 bins to accommodate all items.  

Input:  wieght[] = [2, 5, 4, 7, 1, 3, 8] 
        Bin Capacity c = 10
Output: 3

=============================================== W8D4
A cycle means that in our linked-list, the `next` property points back to a previous node. Images are attached:
(If you find a working solution)
Can you solve it using O(1) (i.e. constant) space, if you haven't already?

Problem 1: 
Given an array (arr) as an argument complete the function countSmileys that should return the total number of smiling faces.
Valid smiley face examples:
:) :D ;-D :~)
Invalid smiley faces:
;( :> :} :]
countSmileys([':)', ';(', ';}', ':-D']);       // should return 2;
countSmileys([';D', ':-(', ':-)', ';~)']);     // should return 3;
countSmileys([';]', ':[', ';*', ':$', ';-D']); // should return 1;
Problem 2: 
This time no story, no theory. The examples below show you how to write function accum:
Examples:
accum("abcd") -> "A-Bb-Ccc-Dddd"
accum("RqaEzty") -> "R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"
accum("cwAt") -> "C-Ww-Aaa-Tttt"
The parameter of accum is a string which includes only letters from a..z and A..Z.


=============================================== W9D2
```Problem 1:
Given a string S and a character C, return an array of integers representing the shortest distance from the character C in the string.
Example 1:
Input: S = "loveleetcode", C = 'e'
Output: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]
Note:
1. S string length is in [1, 10000].
2. C is a single character, and guaranteed to be in string S.
3. All letters in S and C are lowercase.
Problem 2:
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.
Note:
* All numbers will be positive integers.
* The solution set must not contain duplicate combinations
Example 1:
Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:
Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]] 



=============================================== W10D1
Problem 1:
Write a function
tripleDouble(num1, num2)
which takes numbers num1 and num2 and returns 1 if there is a straight triple of a number at any place in num1 and also a straight double of the same number in num2.
If this isn't the case, return 0
Examples
tripleDouble(451999277, 41177722899) == 1
# num1 has straight triple 999s and  num2 has straight double 99s
tripleDouble(1222345, 12345) == 0
# num1 has straight triple 2s but num2 has only a single 2
tripleDouble(12345, 12345) == 0
tripleDouble(666789, 12345667) == 1

Problem 2:
Given a binary array, find the maximum number of consecutive 1s in this array.
Example 1:
Input: [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1s.
    The maximum number of consecutive 1s is 3.
Note:
The input array will only contain 0 and 1.
The length of input array is a positive integer and will not exceed 10,000


=============================================== W10D3
(Warmup) Remove Duplicates from a Sorted Array 

Given an array, write a function that removes duplicates. 

Input: [1, 1, 2, 2, 2, 3]
Output: [1, 2, 3]

------------------------------------------------------------------
(1) Remove Duplicates from a Sorted Array (In-place)

Given an array, write a function that removes duplicates **in place**. Do **NOT** create another array. You must modify the existing array. So for the following input:

array = [1, 1, 2, 2, 2]

your function should modify array such that the first two elements are 1 and 2, respectively. 

--------------------------------------------------------------------
(2) Reverse Only Letters

Given a string, write a function that reverses **only letters**, keeping everything else in the same order. 

Input: "ab-cd"
Output: "dc-ba"

Input: "123ab4c"
Output: "123cb4a"


=============================================== W11D4
Problem 1: 
Given a string S, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.
If possible, output any possible result.  If not possible, return the empty string.
Example 1:
Input: S = "aab"
Output: "aba"
Example 2:
Input: S = "aaab"
Output: ""
Note:
* S will consist of lowercase letters and have length in range [1, 500].
Problem 2:
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].
Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
